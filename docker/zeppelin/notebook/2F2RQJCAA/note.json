{
  "paragraphs": [
    {
      "text": "%pyspark\n\nimport asyncio\n\nasync def count():\n    print(\"One\")\n    await asyncio.sleep(1)\n    print(\"Two\")\n\nasync def main():\n    await asyncio.gather(count(), count(), count())\n\n#if __name__ \u003d\u003d \"__main__\":\nimport time\n#s \u003d time.perf_counter()\nasyncio.run(main())\n#elapsed \u003d time.perf_counter() - s\n#print(f\"{__file__} executed in {elapsed:0.2f} seconds.\")\n    \n    \n",
      "user": "anonymous",
      "dateUpdated": "Mar 8, 2020 3:48:08 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python"
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "Traceback (most recent call last):\n  File \"/tmp/zeppelin_pyspark-2711654386209181292.py\", line 344, in \u003cmodule\u003e\n    code \u003d compile(\u0027\\n\u0027.join(final_code), \u0027\u003cstdin\u003e\u0027, \u0027exec\u0027, ast.PyCF_ONLY_AST, 1)\n  File \"\u003cstdin\u003e\", line 2\n    async def count():\n            ^\nSyntaxError: invalid syntax\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1583639116327_-349675433",
      "id": "20200308-034516_1359660362",
      "dateCreated": "Mar 8, 2020 3:45:16 AM",
      "dateStarted": "Mar 8, 2020 3:48:08 AM",
      "dateFinished": "Mar 8, 2020 3:48:09 AM",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\n\n\nimport time\n\ndef count():\n    print(\"One\")\n    time.sleep(1)\n    print(\"Two\")\n\ndef main():\n    for _ in range(3):\n        count()\n\n#if __name__ \u003d\u003d \"__main__\":\n#s \u003d time.perf_counter()\nmain()\n#elapsed \u003d time.perf_counter() - s\n#print(f\"{__file__} executed in {elapsed:0.2f} seconds.\")\n    ",
      "user": "anonymous",
      "dateUpdated": "Mar 8, 2020 3:47:26 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python"
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "One\nTwo\nOne\nTwo\nOne\nTwo\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1583639171650_-2124875686",
      "id": "20200308-034611_1374473567",
      "dateCreated": "Mar 8, 2020 3:46:11 AM",
      "dateStarted": "Mar 8, 2020 3:47:26 AM",
      "dateFinished": "Mar 8, 2020 3:47:30 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n",
      "user": "anonymous",
      "dateUpdated": "Mar 8, 2020 3:46:28 AM",
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1583639188435_314847738",
      "id": "20200308-034628_1028954450",
      "dateCreated": "Mar 8, 2020 3:46:28 AM",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "asyncio",
  "id": "2F2RQJCAA",
  "angularObjects": {
    "2EZHHJ8DC:shared_process": [],
    "2F2ZQXTPF:shared_process": [],
    "2F23GGGYA:shared_process": [],
    "2F1DNG8NR:shared_process": [],
    "2EZ1WM2AQ:shared_process": [],
    "2F2E5PFU2:shared_process": [],
    "2F31JZQ1K:shared_process": [],
    "2F1JDD454:shared_process": [],
    "2F1H51BQC:shared_process": [],
    "2F3KPH6E5:shared_process": [],
    "2EZMUM7KB:shared_process": [],
    "2F3QKW7VY:shared_process": [],
    "2EZQPNFNA:shared_process": [],
    "2F34A8HUC:shared_process": [],
    "2EZWHCPPM:shared_process": [],
    "2EZE7P224:shared_process": [],
    "2F1SFVMHG:shared_process": [],
    "2EZU5ERUF:shared_process": [],
    "2EZ85J7XU:shared_process": []
  },
  "config": {},
  "info": {}
}